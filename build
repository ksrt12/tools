#!/bin/bash

color_failed=$'\E'"[0;31m"
color_success=$'\E'"[0;32m"
color_reset=$'\E'"[00m"

if [ -z $T ]; then T=`pwd`; fi
if [ -z "${USE_NINJA}" ]; then USE_NINJA=true; else LOGD="| tee logs/$n.log"; fi
NOP=$(nproc --all)

function nirp() {
	echo "${color_failed}Not in ROM path${color_reset}"
	sleep 5;exit;
}
function secp() {
	local mkf=`pwd`/build/core/version_defaults.mk
	if [ -e $mkf ]; then
	echo `cat $mkf | grep "PLATFORM_SECURITY_PATCH :="`
	fi;
}
function findvars() {
	if [ ! -e .localconfig ] || [ "`cat .localconfig | grep "$1=" | cut -d '=' -f 2`" == "" ]; then
		echo "Enter $1:";
		read tmpvar; echo "$1=$tmpvar" >> .localconfig;
	fi
	eval $1="`cat .localconfig | grep "$1=" | cut -d '=' -f 2`";
}
function setconfig() {
echo $1
	varname="`echo "$1" | cut -d '=' -f 1`";
	varvalue="`echo "$1" | cut -d '=' -f 2`";
	findvars $varname; oldv=${!varname}
	$echo sed -i "s/$oldv/$varvalue/g" .localconfig
	findvars $varname;
}
function buildnum() {
	mkdir -p logs;
	local varlist="$name real_$name";
	for o in $varlist
	do
	 if [ ! -e logs/$o ]; then n=1; else n=$((`cat logs/$o` + 1)); fi; echo $n > logs/$o;
	done;
};
function toolchains_links()
{
	local gccl=prebuilts/gcc/linux-x86;
	local my64=aarch64-ksrt12-linux-android;
	local my32=arm-ksrt12-linux-androideabi;
	local ndki=out/soong/ndk/sysroot/usr/include;
	for j in arm aarch64
	do
	 mkdir -p $gccl/$j
	 for p in `ls /home/ksrt12/UBERTC/out/$j* -d`; do
	  if [ ! -d "$gccl/$j/$(basename $p)" ]; then ln -sf ~/UBERTC/out/$(basename $p) $gccl/$j/$(basename $p);fi;
	 done
	done
	for i in $my32 $my64
	do
	 if [ ! -d "$ndki/$i" ]; then ln -sf ~/new/x-tools/$i/$i/sysroot/usr/include/$(echo $i | sed -e 's/ksrt12-//g') $ndki/$i; fi
	done
};
function rme() {
	if [ -e .bashrc ]; then nirp; else
	if [ -n "`find . -maxdepth 1 -empty`" ]; then
	find . -maxdepth 1 -empty | xargs rm -r ; fi; fi
};
function findconfig() {
if [ -d build ] && [ -e Android.bp ] && [ -e Makefile ]; then
	vars="rom dev type"
	for var in $vars
	do
	 findvars $var;
	done
	unset var;
	unset tmpvar;
	rm -rf output; ln -sf out/target/product/$dev output
	if [ ! -d op ]; then ln -sf out/target/product op; fi
	name=$rom\_$dev
	if [ -n "$name" ]; then
		if [ ! -d device/apps ]; then ln -sf ~/apps device/apps; fi
		#if [ ! -d vendor/huawei ]; then ln -sf ~/honor/huawei vendor/huawei; fi
		toolchains_links;
		export LDEV=$dev;
		export LROM=$rom;
	else
		echo "${color_failed} Fatal error: var list is empty! Enter vars manually by running 'findconfig'";
		sleep 5;exit 5;
	fi;
else
nirp
fi
};

function hmmm() {

echo "Look at the source to view more functions. The complete list is:"

	local ilist="buildnum all"
	for i in `cat ~/bin/build | sed -n "/^[[:blank:]]*function /s/function \([a-z_]*\).*/\1/p" | sort | uniq`; do
	 if [ "$i" != "buildnum" ] && [ "$i" != "all" ]; then echo "   $i";fi
	done #| column
}

function killjack() {
	jack-admin kill-server &>/dev/null;
};
function killjava() {
if [ -n "`ps ax | grep java | grep -v 'grep' | cut -d '?' -f1`" ];then
	ps ax | grep java | grep -v 'grep' | cut -d '?' -f1 | xargs kill -9
fi
};
function moka() {
	$echo tmr schedtool -B -n 10 -e ionice -n 7 make -C $T -j$NOP "$@"
};
function reposyncf() {
	local opt=""; local rmlist=$@;
	local comm="repo sync -c -j$NOP --force-sync --no-clone-bundle --no-tags --prune --no-repo-verify"
	for arg in $@; do
	case $arg in
		q) comm="$comm -q";;
		-t|t) local comm="repo --trace sync -l --no-tags " #$2 $3 $4 $5 $6 $7 $8 $9;
			if [ -n "$2" ]; then a=b; fi;;
		r) a=c
			;;
		n) comm="$comm -n"; a=b ;;
		h) for rmf in $rmlist; do if [ "$rmf" != "h" ] && [ "$rmf" != "r" ]; then $echo rm -rf $rmf;fi;done;;
		*) if [ "$arg" != "r" ]; then opt="$opt $arg "; fi #repo sync --no-tags -j$NOP --force-sync $@;
			if [ -n "$1" ]; then a=b; fi;;
	esac
	done
	$echo $comm $opt
	#secp `pwd`;
	if [ "$a" != "b" ]; then $echo rm -rf patches{/,*}/apply; else echo not rm; fi
};
function syncall() {
	dir="aex los RR o slim"
	for g in $dir
	do
	echo -n "${color_success} ========	 $g	 ====================${color_reset}"
	echo ""
	cd ~/$g;
	tmr reposyncf $2;
	cd - > /dev/null
	done
	echo "-------- total ---------"
};
function chkadb() {
	echo `adb devices | grep -w $1`
	if [ -n "`adb devices | grep -w $1`" ]; then
	return 1
	else return 124; fi
}
function sideload() {
	chkadb sideload;if [ $? == 1 ];then echo "sideload - ok"; else
	chkadb recovery;if [ $? == 1 ];then echo "recovery - ok; Запустите sideload"; adb wait-\for-sideload; sideload; else
	chkadb device;if [ $? == 1 ];then echo "device - ok; Запуск sideload";adb reboot sideload; adb wait-\for-sideload; sideload; else
	echo "Подключите устройство"; adb wait-\for-any ;sideload;
	fi;fi;fi
};
function flashzip() {
	if [ -n "$1" ]; then
		filezip=$1;
	else
		if [ -n "`ls output/*.md5sum`" ];
			then filezip=$(echo `ls output/*.md5sum -t | sed -e 's/.md5sum//g'` | cut -d' ' -f1);
		else
			echo "flash zip now?";
			read -r -t 60 filezip || exit
		fi;
	fi;
	if [ -e $filezip ]; then
		sideload;
		$echo adb sideload $filezip;
		adb wait-\for-recovery;
#		adb reboot;
	else
		echo "${color_failed} файл $filezip не найден!  ${color_reset}";
	fi
};
function flashapk() {
	adb remount;
	for apk in $@
	do
	if [ -z $apk ];then read -r apk; fi
	if [ -d output/system/priv-app/$apk ]; then path="priv-";
	elif [ -d output/system/app/$apk ]; then path="";
	fi
	$echo adb push output/system/$path\app/$apk/$apk.apk /system/$path\app/$apk/$apk.apk;
	done;
	read -r -t 10 rb || exit;
	if [ "$rb" == "y" ]; then adb reboot; fi
};
function flashimg() {
	if [ -e $2 ]; then img=$2; else
	img=output/$1.img; fi
	if [ ! -e $img ]; then read -r img; fi
	if [ -e $img ]; then
	adb reboot bootloader;
	if [ "$3" != "" ]; then $echo fastboot flash $1 $img; fi
	$echo fastboot boot $img;
	fi;
};
function flashboot() {
	flashimg boot $1 $2
};
function flashrec() {
	flashimg recovery $1 $2
};
function all() {
	if [ -z `which mka` ]; then fmka=moka; else fmka=mka;fi
	case $1 in
	s) jack-admin start-server;;
	*) $fmka $@; killjack;;
esac;
};
function patchfl() {
	local base=~/havoc;
	local patchbase=$base/patches;
	local lcfl=`echo $(pwd) | sed -e 's/\/home\/ksrt12\/havoc\///g' | sed -e 's/\//_/g'`;
	$echo git am -3 $patchbase/$lcfl/*.patch;
};

#clear;
function b()
{
rme;
case $1 in
	ini) if [ "$2" == "set" ]; then setconfig $3; fi
		findconfig; . bu*/en*; lunch $name-$type;
		case $2 in
			set) #nothing
				;;
			eng) all otapackage;;
			*) $2; $3; $4; $5; $6; $7; $8; $9;;
		esac;;
	fz) flashzip $2;;
	ra) tmr syncall;;
	r) if [ -d .repo ]; then tmr reposyncf $@; else echo "Cannot find .repo"; fi;;
	i) b installclean;;
	c) b i; b;;
	p) patchfl;;
	info) echo `cat .localconfig`;;
	*)		findconfig;
			. bu*/en*; T=`gettop`; # export LANG=C;
			if [ -n "$1" ] || [ "$rom" == "aosp" ]; then
				lunch $name-$type;
				if [ "$1" == "d" ]; then development/scripts/stack;
				else
				if [ "$rom" == "aosp" ] && [ -z "$1" ]; then all otapackage; else all $@; fi;
				fi;
			else
				case $rom in
				pa) ./rom-build.sh $dev;;
				aex) lunch $name-$type; tmr mka aex;;
				*) echo "brunch $LDEV"; brunch $dev $LOGD;;
				esac
	if [ $? -eq 0 ] ; then buildnum; fi;
			fi; killjack; killjava;;
esac;
}
function operat() {
cat <<EOD
-z # строка пуста
-n # строка не пуста
=, (==) # строки равны
!= # строки неравны
-eq # равно
-ne # неравно
-lt,(< ) # меньше
-le,(<=) # меньше или равно
-gt,(>) #больше
-ge,(>=) #больше или равно
! #отрицание логического выражения
-a,(&&) #логическое «И»
-o,(||) # логическое «ИЛИ»
EOD
}
